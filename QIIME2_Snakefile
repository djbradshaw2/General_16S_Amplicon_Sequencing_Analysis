"""
Snakemake Snakefile for Running Deblur, based on:
https://github.com/LangilleLab/microbiome_helper/wiki/Amplicon-SOP-v2

source activate qiime2-2018.6
"""
#__author__ = "David Bradshaw & Nick Dickens"
#__copyright__ = "Copyright 2019, David J. Bradshaw II & Nicholas J. Dickens"
#__email__ = "dbradshaw2015@fau.edu"
#__license__ = "MIT"

#snakemake -s '/home/microbiology/NICK/forwards.snakefile'  --configfile '/home/microbiology/NICK/#Deblur_forwards.json'

import multiprocessing
import subprocess

import pandas as pd
from qiime2 import Artifact, Visualization
from qiime2.plugins import feature_table

cpu_count=int(multiprocessing.cpu_count())

#Remove the #'s in front of the rule all that you want to use#
#Use this rule all to stop before Deblur to decide what trim length to use#
#rule all:
#  input:
#      file=config['output_dir'] + "/reads_trimmed_joined_filtered.qzv"

#Use this rule all to stop before making other taxonomic levels abundance tables if not going to use them#
#rule all:
#   input:
#      biom=config['output_dir'] + "/phyloseq.biom"

#Use this to stop before last set of scripts since these items need to be actually created beforehand#
#rule all:
#   input:
#      tsv=config['output_dir'] + "/species/deblur_table_level_7_aa.tsv"

#Use this as the last set of scripts for other taxonomic levels#
#rule all:
#   input:
#      tsv=config['output_dir'] + "/species/level_7_aa.tsv"

#TODO: add a primer trimming step, primers can be added to the config.json


# 1.5 Import fastq files (with primers trimmed)
rule import_raw_sequences:
    input:
      manifest=config["manifest_file"]
    output:
      seqs=config['output_dir'] + "/reads_trimmed.qza"
    params:
      type="SampleData[PairedEndSequencesWithQuality]",
      input_format="PairedEndFastqManifestPhred33"
    shell:
      "qiime tools import --type {params.type} --input-path {input.manifest} --output-path {output.seqs} --input-format {params.input_format}"

# Visualization for 1.5
rule summarize_imported_seqs:
    input:
      seqs=config['output_dir'] + "/reads_trimmed.qza"
    output:
          file=config['output_dir'] + "/reads_trimmed.qzv"
    shell:
          "qiime demux summarize --i-data {input.seqs} --o-visualization {output.file}"

# 2A - Deblur
# 2A.1 Join Pairs
rule join_paired_reads:
    input:
          file=config['output_dir'] + "/reads_trimmed.qzv",
          seqs=config['output_dir'] + "/reads_trimmed.qza"
    output:
          config['output_dir'] + "/reads_trimmed_joined.qza"
    shell:
          "qiime vsearch join-pairs --i-demultiplexed-seqs {input.seqs} --o-joined-sequences {output} --verbose"

# Visualization for 2A.1
rule visualize_joined_sequences:
    input:
          seqs=config['output_dir'] + "/reads_trimmed_joined.qza"
    output:
          file=config['output_dir'] + "/reads_trimmed_joined.qzv"
    shell:
          "qiime demux summarize --i-data {input.seqs} --o-visualization {output.file}"

# 2A.2 Filter Low Quality Reads
rule quality_filter_sequences:
    input:
          seqs=config['output_dir'] + "/reads_trimmed_joined.qza",
          file=config['output_dir'] + "/reads_trimmed_joined.qzv"
    output:
      seqs=config['output_dir'] + "/reads_trimmed_joined_filtered.qza",
      stats=config['output_dir'] + "/reads_trimmed_joined_filter_stats.qza"
    shell:
      "qiime quality-filter q-score-joined --i-demux {input.seqs} --o-filtered-sequences {output.seqs} --o-filter-stats {output.stats} --verbose"

# Visualization 2A.2
rule visualize_filtered_sequences:
    input:
      seqs=config['output_dir'] + "/reads_trimmed_joined_filtered.qza"
    output:
      file=config['output_dir'] + "/reads_trimmed_joined_filtered.qzv"
    shell:
      "qiime demux summarize --i-data {input.seqs} --o-visualization {output.file}"
#First rule all stops here to allow you to use the qzv above to look at the quality graph to deterimine the best --p-trim-length#

# 2A.3 Run deblur

rule run_deblur:
    input:
      seqs=config['output_dir'] + "/reads_trimmed_joined_filtered.qza",
      file=config['output_dir'] + "/reads_trimmed_joined_filtered.qzv"
    output:
      table=config['output_dir'] + "/deblur_table.qza",
      seqs=config['output_dir'] + "/deblur_rep_seqs.qza",
      stats=config['output_dir'] +"/debur_stats.qza"
    shell:
      """qiime deblur denoise-16S --i-demultiplexed-seqs {input.seqs} \
                       --p-trim-length 242 \
                       --p-sample-stats \
                       --p-min-reads 0 \
                       --p-jobs-to-start 4 \
                       --o-table {output.table} \
                       --o-representative-sequences {output.seqs} \
                       --o-stats {output.stats}"""

# Visualization for step 4
rule deblur_summary_table:
    input:
      table=config['output_dir'] + "/deblur_table.qza",
    output:
      table=config['output_dir'] + "/deblur_table_summary.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.table}"

rule deblur_summary_seqs:
    input:
      table=config['output_dir'] + "/deblur_table_summary.qzv",
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs.qza",
      stats=config['output_dir'] +"/debur_stats.qza"
    output:
      file=config['output_dir'] + "/deblur_rep_seqs_summary.qzv"
    shell:
      "qiime feature-table tabulate-seqs --i-data {input.rep_seqs} --o-visualization {output.file}"

rule deblur_summary_stats:
    input:
      file=config['output_dir'] + "/deblur_rep_seqs_summary.qzv",
      stats=config['output_dir'] +"/debur_stats.qza"
    output:
      file=config['output_dir'] + "/deblur_stats.qzv"
    shell:
      "qiime deblur visualize-stats --i-deblur-stats {input.stats} --o-visualization {output.file}"

rule annotate_rep_seqs:
    input:
      file=config['output_dir'] + "/deblur_stats.qzv",
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs.qza",
      classifier=config["classifier"]
    output:
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    shell:
      "qiime feature-classifier classify-sklearn --i-classifier {input.classifier} --i-reads {input.rep_seqs} --o-classification {output.taxonomy} --p-reads-per-batch 10000 --verbose"

rule visualize_taxonomy:
    input:
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      file=config['output_dir'] + "/taxonomy.qzv"
    shell:
      "qiime metadata tabulate --m-input-file {input.taxonomy} --o-visualization {output.file}"

rule filter_mito_from_table:
    input:
      file=config['output_dir'] + "/taxonomy.qzv",
      table=config['output_dir'] + "/deblur_table.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/deblur_table_nmc.qza"
    shell:
      "qiime taxa filter-table --i-table {input.table} --i-taxonomy {input.taxonomy} --p-exclude mitochondria --o-filtered-table {output.table}"

rule filter_mito_from_rep_seqs:
    input:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs.qza",
      table=config['output_dir'] + "/deblur_table_nmc.qza"
    output:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_nmc.qza",
    shell:
      "qiime feature-table filter-seqs --i-data {input.rep_seqs} --i-table {input.table} --o-filtered-data {output.rep_seqs}"

rule visualize_nmc_table:
    input:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_nmc.qza",
      table=config['output_dir'] + "/deblur_table_nmc.qza"
    output:
      file=config['output_dir'] + "/deblur_table_nmc.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule visualize_nmc_rep_seqs:
    input:
      file=config['output_dir'] + "/deblur_table_nmc.qzv",
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_nmc.qza"
    output:
      file=config['output_dir'] + "/deblur_rep_seqs_nmc.qzv"
    shell:
      "qiime feature-table tabulate-seqs --i-data {input.rep_seqs} --o-visualization {output.file}"




rule filter_chloro_from_table:
    input:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_nmc.qzv",
      table=config['output_dir'] + "/deblur_table_nmc.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/deblur_table_ncp_nmc.qza"
    shell:
      "qiime taxa filter-table --i-table {input.table} --i-taxonomy {input.taxonomy} --p-exclude chloroplast --o-filtered-table {output.table}"

rule filter_chloro_from_rep_seqs:
    input:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_nmc.qza",
      table=config['output_dir'] + "/deblur_table_ncp_nmc.qza"
    output:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_ncp_nmc.qza"
    shell:
      "qiime feature-table filter-seqs --i-data {input.rep_seqs} --i-table {input.table} --o-filtered-data {output.rep_seqs}"

rule visualize_nmc_ncp_table:
    input:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_ncp_nmc.qza",
      table=config['output_dir'] + "/deblur_table_ncp_nmc.qza"
    output:
      file=config['output_dir'] + "/deblur_table_ncp_nmc.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule visualize_nmc_ncp_rep_seqs:
    input:
      file=config['output_dir'] + "/deblur_table_ncp_nmc.qzv",
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_ncp_nmc.qza"
    output:
      file=config['output_dir'] + "/deblur_rep_seqs_ncp_nmc.qzv"
    shell:
      "qiime feature-table tabulate-seqs --i-data {input.rep_seqs} --o-visualization {output.file}"




rule filter_Unassigned_from_table:
    input:
      file=config['output_dir'] + "/deblur_rep_seqs_ncp_nmc.qzv",
      table=config['output_dir'] + "/deblur_table_ncp_nmc.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/deblur_table_final.qza"
    shell:
      "qiime taxa filter-table --i-table {input.table} --i-taxonomy {input.taxonomy} --p-exclude Unassigned --o-filtered-table {output.table}"

rule filter_Unassigned_from_rep_seqs:
    input:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_ncp_nmc.qza",
      table=config['output_dir'] + "/deblur_table_final.qza"
    output:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_final.qza"
    shell:
      "qiime feature-table filter-seqs --i-data {input.rep_seqs} --i-table {input.table} --o-filtered-data {output.rep_seqs}"

rule visualize_final_table:
    input:
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_final.qza",
      table=config['output_dir'] + "/deblur_table_final.qza"
    output:
      file=config['output_dir'] + "/deblur_table_final.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule visualize_final_rep_seqs:
    input:
      table=config['output_dir'] + "/deblur_table_final.qzv",
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_final.qza"
    output:
      file=config['output_dir'] + "/deblur_rep_seqs_final.qzv"
    shell:
      "qiime feature-table tabulate-seqs --i-data {input.rep_seqs} --o-visualization {output.file}"

rule visualize_taxa_plots:
    input:
      file=config['output_dir'] + "/deblur_rep_seqs_final.qzv",
      table=config['output_dir'] + "/deblur_table_final.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza",
      map_file=config["map_file"]
    output:
      file=config['output_dir'] + "/taxa-bar-plots.qzv"
    shell:
      "qiime taxa barplot --i-table {input.table} --i-taxonomy {input.taxonomy} --o-visualization {output.file} --m-metadata-file {input.map_file}"

rule align_mafft_rep_seqs:
    input:
      file=config['output_dir'] + "/taxa-bar-plots.qzv",
      rep_seqs=config['output_dir'] + "/deblur_rep_seqs_final.qza"
    output:
      aligned_seqs=config['output_dir'] + "/aligned-rep-seqs.qza"
    threads: cpu_count
    shell:
      "qiime alignment mafft --i-sequences {input.rep_seqs} --o-alignment {output.aligned_seqs} --verbose --p-parttree --p-n-threads 4"

rule align_mask_rep_seqs:
    input:
      aligned_seqs=config['output_dir'] + "/aligned-rep-seqs.qza"
    output:
      filtered_aligned_seqs=config['output_dir'] + "/masked-aligned-rep-seqs.qza"
    shell:
      "qiime alignment mask --i-alignment {input.aligned_seqs} --o-masked-alignment {output.filtered_aligned_seqs} --verbose"

rule create_phylogenic_tree:
    input:
      filtered_aligned_seqs=config['output_dir'] + "/masked-aligned-rep-seqs.qza"
    output:
      tree=config['output_dir'] + "/unrooted-tree.qza"
    threads: cpu_count
    shell:
      "qiime phylogeny fasttree --i-alignment {input.filtered_aligned_seqs} --o-tree {output.tree} --verbose --p-n-threads {threads}"

rule create_midpoint_phylogenic_tree:
    input:
      tree=config['output_dir'] + "/unrooted-tree.qza"
    output:
      tree=config['output_dir'] + "/rooted-tree.qza"
    shell:
      "qiime phylogeny midpoint-root --i-tree {input.tree} --o-rooted-tree {output.tree}"

# Have to look into the table-nc-ncp-nmc-dn-97-0.005.qzv file for the sample-frequency-detail.csv and find the smallest number in the second column in order to define --p-sampling-depth

rule core_metrics:
    input:
      tree=config['output_dir'] + "/rooted-tree.qza",
      table=config['output_dir'] + "/deblur_table_final.qza",
      map_file=config["map_file"]
    output:
      rarefied_table=config['output_dir'] + "/rarefied_table.qza",
      faith_pd_vector=config['output_dir'] + "/faith_pd_vector.qza",
      observed_otus_vector=config['output_dir'] + "/observed_otus_vector.qza",
      shannon_vector=config['output_dir'] + "/shannon_vector.qza",
      evenness_vector=config['output_dir'] + "/evenness_vector.qza",
      unweighted_unifrac_distance_matrix=config['output_dir'] + "/unweighted_unifrac_distance_matrix.qza",
      weighted_unifrac_distance_matrix=config['output_dir'] + "/weighted_unifrac_distance_matrix.qza",
      jaccard_distance_matrix=config['output_dir'] + "/jaccard_distance_matrix.qza",
      bray_curtis_distance_matrix=config['output_dir'] + "/bray_curtis_distance_matrix.qza",
      unweighted_unifrac_pcoa_results=config['output_dir'] + "/unweighted_unifrac_pcoa_results.qza",
      weighted_unifrac_pcoa_results=config['output_dir'] + "/weighted_unifrac_pcoa_results.qza",
      jaccard_pcoa_results=config['output_dir'] + "/jaccard_pcoa_results.qza",
      bray_curtis_pcoa_results=config['output_dir'] + "/bray_curtis_pcoa_results.qza",
      unweighted_unifrac_emperor=config['output_dir'] + "/unweighted_unifrac_emperor.qzv",
      weighted_unifrac_emperor=config['output_dir'] + "/weighted_unifrac_emperor.qzv",
      jaccard_emperor=config['output_dir'] + "/jaccard_emperor.qzv",
      bray_curtis_emperor=config['output_dir'] + "/bray_curtis_emperor.qzv"
    params:
      dir=config['output_dir'] + ""
    threads: cpu_count
    run:
      my_table = Artifact.load(input.table)
      my_tree = Artifact.load(input.tree)

      df = my_table.view(pd.DataFrame)
      threshold = int(min(df.sum(axis=1)))

      cmd = """qiime diversity core-metrics-phylogenetic --i-phylogeny {} --i-table {}  \
      --p-sampling-depth {} --m-metadata-file {}  \
      --o-rarefied-table {} \
      --o-faith-pd-vector {} \
      --o-observed-otus-vector {} \
      --o-shannon-vector {} \
      --o-evenness-vector {} \
      --o-unweighted-unifrac-distance-matrix {} \
      --o-weighted-unifrac-distance-matrix {} \
      --o-jaccard-distance-matrix {} \
      --o-bray-curtis-distance-matrix {} \
      --o-unweighted-unifrac-pcoa-results {} \
      --o-weighted-unifrac-pcoa-results {} \
      --o-jaccard-pcoa-results {} \
      --o-bray-curtis-pcoa-results {} \
      --o-unweighted-unifrac-emperor {} \
      --o-weighted-unifrac-emperor {} \
      --o-jaccard-emperor {} \
      --o-bray-curtis-emperor {} \
      --p-n-jobs {} --verbose""".format(input.tree, input.table, threshold, input.map_file,
      output.rarefied_table,  output.faith_pd_vector,  output.observed_otus_vector, output.shannon_vector,
      output.evenness_vector, output.unweighted_unifrac_distance_matrix, output.weighted_unifrac_distance_matrix,
      output.jaccard_distance_matrix, output.bray_curtis_distance_matrix, output.unweighted_unifrac_pcoa_results,
      output.weighted_unifrac_pcoa_results, output.jaccard_pcoa_results, output.bray_curtis_pcoa_results,
      output.unweighted_unifrac_emperor, output.weighted_unifrac_emperor, output.jaccard_emperor,
      output.bray_curtis_emperor,  threads)

      try:
          cmd_output = subprocess.check_output(cmd, shell=True)
      except subprocess.CalledProcessError as c:
          sys.exit("ERROR: command {} could not be run in the shell.\n Command failed with return code: {}.".format(c.cmd, c.returncode))

# Have to look into the table-nc-ncp-nmc-dn-97-0.005.qzv file for the sample-frequency-detail.csv and find the largest number in the second column in order to define --p-max-depth

rule alpha_rarefaction:
    input:
      tree=config['output_dir'] + "/rooted-tree.qza",
      table=config['output_dir'] + "/deblur_table_final.qza",
      map_file=config["map_file"],
      rarefied_table=config['output_dir'] + "/rarefied_table.qza"
    output:
      file=config['output_dir'] + "/alpha-rarefaction.qzv"
    run:
      my_table = Artifact.load(input.table)
      df = my_table.view(pd.DataFrame)
      threshold = int(max(df.sum(axis=1)))
      cmd = """qiime diversity alpha-rarefaction --i-phylogeny {} \
      --i-table {} --p-max-depth {} \
      --m-metadata-file {} --o-visualization {}""".format(input.tree, input.table, threshold, input.map_file, output.file)

      try:
          cmd_output = subprocess.check_output(cmd, shell=True)
      except subprocess.CalledProcessError as c:
          sys.exit("ERROR: command {} could not be run in the shell.\n Command failed with return code: {}.".format(c.cmd, c.returncode))

#Prepare QIIME2 info for phyloseq

rule export_taxonomy:
    input:
      file=config['output_dir'] + "/alpha-rarefaction.qzv",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      taxonomy=config['output_dir'] + "/taxonomy/taxonomy.tsv"
    params:
      dir=config['output_dir'] + "/taxonomy"
    shell:
      "qiime tools export --input-path {input.taxonomy} --output-path {params.dir}"

rule export_table:
    input:
      table=config['output_dir'] + "/deblur_table_final.qza"
    output:
      table=config['output_dir'] + "/final_table/feature-table.biom"
    params:
      dir=config['output_dir'] + "/final_table"
    shell:
      "qiime tools export --input-path {input.table} --output-path {params.dir}"


rule convert_table_to_txt:
    input:
      table=config['output_dir'] + "/final_table/feature-table.biom"
    output:
      table=config['output_dir'] + "/feature-table.tsv"
    shell:
      "biom convert -i {input.table} -o {output.table} --to-tsv"

rule export_tree:
    input:
      table=config['output_dir'] + "/feature-table.tsv",
      tree=config['output_dir'] + "/rooted-tree.qza"
    output:
      tree=config['output_dir'] + "/tree/tree.nwk"
    params:
      dir=config['output_dir'] + "/tree"
    shell:
      "qiime tools export --input-path {input.tree} --output-path {params.dir}"

rule change_taxonomy_label_1:
    input:
      tree=config['output_dir'] + "/tree/tree.nwk",
      taxonomy=config['output_dir'] + "/taxonomy/taxonomy.tsv"
    output:
      taxonomy=temp(config['output_dir'] + "/taxonomy/taxonomy1.tsv")
    shell:
      "sed '1s/Feature ID/#OTUID/' {input.taxonomy} > {output.taxonomy}"

rule change_taxonomy_label_2:
    input:
      taxonomy=config['output_dir'] + "/taxonomy/taxonomy1.tsv"
    output:
      taxonomy=config['output_dir'] + "/taxonomy/taxonomy2.tsv"
    shell:
      "sed '1s/Taxon/taxonomy/' {input.taxonomy} > {output.taxonomy}"

rule combine_taxonomy_and_table:
    input:
      taxonomy=config['output_dir'] + "/taxonomy/taxonomy2.tsv",
      table=config['output_dir'] + "/final_table/feature-table.biom"
    output:
      biom=config['output_dir'] + "/table-with-taxonomy.biom"
    shell:
      "biom add-metadata -i {input.table} -o {output.biom} --observation-metadata-fp {input.taxonomy} --sc-separated taxonomy --observation-header OTUID,taxonomy,Confidence"

#This rule is not working on all systems, an update may have messed with it, if this occurs change rule all to above output#
rule convert_taxatable_to_phyloseq:
    input:
      biom=config['output_dir'] + "/table-with-taxonomy.biom"
    output:
      biom=config['output_dir'] + "/phyloseq.biom"
    shell:
      "biom convert -i {input.biom} -o {output.biom} --to-json --table-type='OTU table'"

#Second rule all stops here, if you do not want conglomerated tables at higher taxonomic levels stop here#

#Create phylum level tables

rule level_2_absolute_abundance:
    input:
      biom=config['output_dir'] + "/phyloseq.biom",
      table=config['output_dir'] + "/deblur_table_final.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/phylum/deblur_table_level_2_aa.qza"
    shell:
      "qiime taxa collapse --i-table {input.table} --i-taxonomy {input.taxonomy} --o-collapsed-table {output.table} --p-level 2"

rule level_2_summarize:
    input:
      table=config['output_dir'] + "/phylum/deblur_table_level_2_aa.qza"
    output:
      file=config['output_dir'] + "/phylum/deblur_table_level_2.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule level_2_relative_frequency:
    input:
      table=config['output_dir'] + "/phylum/deblur_table_level_2_aa.qza",
      file=config['output_dir'] + "/phylum/deblur_table_level_2.qzv"
    output:
      table=config['output_dir'] + "/phylum/deblur_table_level_2_rf.qza"
    shell:
      "qiime feature-table relative-frequency --i-table {input.table} --o-relative-frequency-table {output.table}"

rule level_2_rf_export:
     input:
      table=config['output_dir'] + "/phylum/deblur_table_level_2_rf.qza"
     output:
      tsv=config['output_dir'] + "/phylum/deblur_table_level_2_rf.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

rule level_2_aa_export:
     input:
      tsv=config['output_dir'] + "/phylum/deblur_table_level_2_rf.tsv",
      table=config['output_dir'] + "/phylum/deblur_table_level_2_aa.qza"
     output:
      tsv=config['output_dir'] + "/phylum/deblur_table_level_2_aa.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

#Create class level tables

rule level_3_absolute_abundance:
    input:
      tsv=config['output_dir'] + "/phylum/deblur_table_level_2_aa.tsv",
      table=config['output_dir'] + "/deblur_table_final.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/class/deblur_table_level_3_aa.qza"
    shell:
      "qiime taxa collapse --i-table {input.table} --i-taxonomy {input.taxonomy} --o-collapsed-table {output.table} --p-level 3"

rule level_3_summarize:
    input:
      table=config['output_dir'] + "/class/deblur_table_level_3_aa.qza"
    output:
      file=config['output_dir'] + "/class/deblur_table_level_3.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule level_3_relative_frequency:
    input:
      table=config['output_dir'] + "/class/deblur_table_level_3_aa.qza",
      file=config['output_dir'] + "/class/deblur_table_level_3.qzv"
    output:
      table=config['output_dir'] + "/class/deblur_table_level_3_rf.qza"
    shell:
      "qiime feature-table relative-frequency --i-table {input.table} --o-relative-frequency-table {output.table}"

rule level_3_rf_export:
     input:
      table=config['output_dir'] + "/class/deblur_table_level_3_rf.qza"
     output:
      tsv=config['output_dir'] + "/class/deblur_table_level_3_rf.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

rule level_3_aa_export:
     input:
      tsv=config['output_dir'] + "/class/deblur_table_level_3_rf.tsv",
      table=config['output_dir'] + "/class/deblur_table_level_3_aa.qza"
     output:
      tsv=config['output_dir'] + "/class/deblur_table_level_3_aa.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"


#Create order level tables

rule level_4_absolute_abundance:
    input:
      tsv=config['output_dir'] + "/class/deblur_table_level_3_aa.tsv",
      table=config['output_dir'] + "/deblur_table_final.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/order/deblur_table_level_4_aa.qza"
    shell:
      "qiime taxa collapse --i-table {input.table} --i-taxonomy {input.taxonomy} --o-collapsed-table {output.table} --p-level 4"

rule level_4_summarize:
    input:
      table=config['output_dir'] + "/order/deblur_table_level_4_aa.qza"
    output:
      file=config['output_dir'] + "/order/deblur_table_level_4.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule level_4_relative_frequency:
    input:
      table=config['output_dir'] + "/order/deblur_table_level_4_aa.qza",
      file=config['output_dir'] + "/order/deblur_table_level_4.qzv"
    output:
      table=config['output_dir'] + "/order/deblur_table_level_4_rf.qza"
    shell:
      "qiime feature-table relative-frequency --i-table {input.table} --o-relative-frequency-table {output.table}"

rule level_4_rf_export:
     input:
      table=config['output_dir'] + "/order/deblur_table_level_4_rf.qza"
     output:
      tsv=config['output_dir'] + "/order/deblur_table_level_4_rf.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

rule level_4_aa_export:
     input:
      tsv=config['output_dir'] + "/order/deblur_table_level_4_rf.tsv",
      table=config['output_dir'] + "/order/deblur_table_level_4_aa.qza"
     output:
      tsv=config['output_dir'] + "/order/deblur_table_level_4_aa.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

#Create family level tables

rule level_5_absolute_abundance:
    input:
      tsv=config['output_dir'] + "/order/deblur_table_level_4_aa.tsv",
      table=config['output_dir'] + "/deblur_table_final.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/family/deblur_table_level_5_aa.qza"
    shell:
      "qiime taxa collapse --i-table {input.table} --i-taxonomy {input.taxonomy} --o-collapsed-table {output.table} --p-level 5"

rule level_5_summarize:
    input:
      table=config['output_dir'] + "/family/deblur_table_level_5_aa.qza"
    output:
      file=config['output_dir'] + "/family/deblur_table_level_5.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule level_5_relative_frequency:
    input:
      table=config['output_dir'] + "/family/deblur_table_level_5_aa.qza",
      file=config['output_dir'] + "/family/deblur_table_level_5.qzv"
    output:
      table=config['output_dir'] + "/family/deblur_table_level_5_rf.qza"
    shell:
      "qiime feature-table relative-frequency --i-table {input.table} --o-relative-frequency-table {output.table}"

rule level_5_rf_export:
     input:
      table=config['output_dir'] + "/family/deblur_table_level_5_rf.qza"
     output:
      tsv=config['output_dir'] + "/family/deblur_table_level_5_rf.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

rule level_5_aa_export:
     input:
      tsv=config['output_dir'] + "/family/deblur_table_level_5_rf.tsv",
      table=config['output_dir'] + "/family/deblur_table_level_5_aa.qza"
     output:
      tsv=config['output_dir'] + "/family/deblur_table_level_5_aa.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

#Create genus level tables

rule level_6_absolute_abundance:
    input:
      tsv=config['output_dir'] + "/family/deblur_table_level_5_aa.tsv",
      table=config['output_dir'] + "/deblur_table_final.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/genus/deblur_table_level_6_aa.qza"
    shell:
      "qiime taxa collapse --i-table {input.table} --i-taxonomy {input.taxonomy} --o-collapsed-table {output.table} --p-level 6"

rule level_6_summarize:
    input:
      table=config['output_dir'] + "/genus/deblur_table_level_6_aa.qza"
    output:
      file=config['output_dir'] + "/genus/deblur_table_level_6.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule level_6_relative_frequency:
    input:
      table=config['output_dir'] + "/genus/deblur_table_level_6_aa.qza",
      file=config['output_dir'] + "/genus/deblur_table_level_6.qzv"
    output:
      table=config['output_dir'] + "/genus/deblur_table_level_6_rf.qza"
    shell:
      "qiime feature-table relative-frequency --i-table {input.table} --o-relative-frequency-table {output.table}"

rule level_6_rf_export:
     input:
      table=config['output_dir'] + "/genus/deblur_table_level_6_rf.qza"
     output:
      tsv=config['output_dir'] + "/genus/deblur_table_level_6_rf.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

rule level_6_aa_export:
     input:
      tsv=config['output_dir'] + "/genus/deblur_table_level_6_rf.tsv",
      table=config['output_dir'] + "/genus/deblur_table_level_6_aa.qza"
     output:
      tsv=config['output_dir'] + "/genus/deblur_table_level_6_aa.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

#Create species level tables

rule level_7_absolute_abundance:
    input:
      tsv=config['output_dir'] + "/genus/deblur_table_level_6_aa.tsv",
      table=config['output_dir'] + "/deblur_table_final.qza",
      taxonomy=config['output_dir'] + "/taxonomy.qza"
    output:
      table=config['output_dir'] + "/species/deblur_table_level_7_aa.qza"
    shell:
      "qiime taxa collapse --i-table {input.table} --i-taxonomy {input.taxonomy} --o-collapsed-table {output.table} --p-level 7"

rule level_7_summarize:
    input:
      table=config['output_dir'] + "/species/deblur_table_level_7_aa.qza"
    output:
      file=config['output_dir'] + "/species/deblur_table_level_7.qzv"
    shell:
      "qiime feature-table summarize --i-table {input.table} --o-visualization {output.file}"

rule level_7_relative_frequency:
    input:
      table=config['output_dir'] + "/species/deblur_table_level_7_aa.qza",
      file=config['output_dir'] + "/species/deblur_table_level_7.qzv"
    output:
      table=config['output_dir'] + "/species/deblur_table_level_7_rf.qza"
    shell:
      "qiime feature-table relative-frequency --i-table {input.table} --o-relative-frequency-table {output.table}"

rule level_7_rf_export:
     input:
      table=config['output_dir'] + "/species/deblur_table_level_7_rf.qza"
     output:
      tsv=config['output_dir'] + "/species/deblur_table_level_7_rf.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

rule level_7_aa_export:
     input:
      tsv=config['output_dir'] + "/species/deblur_table_level_7_rf.tsv",
      table=config['output_dir'] + "/species/deblur_table_level_7_aa.qza"
     output:
      tsv=config['output_dir'] + "/species/deblur_table_level_7_aa.tsv"
     shell:
      "qiime tools export --input-path {input.table} --output-path {output.tsv}"

#Third rule all stops here, the above items need to be created for the next set of scripts to work#

rule level_2_convert_rf_table_to_txt:
    input:
      tsv=config['output_dir'] + "/species/deblur_table_level_7_aa.tsv",
      table=config['output_dir'] + "/phylum/deblur_table_level_2_rf.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/phylum/level_2_rf.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_2_convert_aa_table_to_txt:
    input:
      tsv=config['output_dir'] + "/phylum/level_2_rf.tsv",
      table=config['output_dir'] + "/phylum/deblur_table_level_2_aa.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/phylum/level_2_aa.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_3_convert_rf_table_to_txt:
    input:
      tsv=config['output_dir'] + "/phylum/level_2_aa.tsv",
      table=config['output_dir'] + "/class/deblur_table_level_3_rf.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/class/level_3_rf.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_3_convert_aa_table_to_txt:
    input:
      tsv=config['output_dir'] + "/class/level_3_rf.tsv",
      table=config['output_dir'] + "/class/deblur_table_level_3_aa.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/class/level_3_aa.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_4_convert_rf_table_to_txt:
    input:
      tsv=config['output_dir'] + "/class/level_3_aa.tsv",
      table=config['output_dir'] + "/order/deblur_table_level_4_rf.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/order/level_4_rf.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_4_convert_aa_table_to_txt:
    input:
      tsv=config['output_dir'] + "/order/level_4_rf.tsv",
      table=config['output_dir'] + "/order/deblur_table_level_4_aa.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/order/level_4_aa.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_5_convert_rf_table_to_txt:
    input:
      tsv=config['output_dir'] + "/order/level_4_aa.tsv",
      table=config['output_dir'] + "/family/deblur_table_level_5_rf.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/family/level_5_rf.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_5_convert_aa_table_to_txt:
    input:
      tsv=config['output_dir'] + "/family/level_5_rf.tsv",
      table=config['output_dir'] + "/family/deblur_table_level_5_aa.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/family/level_5_aa.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_6_convert_rf_table_to_txt:
    input:
      tsv=config['output_dir'] + "/family/level_5_aa.tsv",
      table=config['output_dir'] + "/genus/deblur_table_level_6_rf.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/genus/level_6_rf.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_6_convert_aa_table_to_txt:
    input:
      tsv=config['output_dir'] + "/genus/level_6_rf.tsv",
      table=config['output_dir'] + "/genus/deblur_table_level_6_aa.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/genus/level_6_aa.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_7_convert_rf_table_to_txt:
    input:
      tsv=config['output_dir'] + "/genus/level_6_aa.tsv",
      table=config['output_dir'] + "/species/deblur_table_level_7_rf.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/species/level_7_rf.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"

rule level_7_convert_aa_table_to_txt:
    input:
      tsv=config['output_dir'] + "/species/level_7_rf.tsv",
      table=config['output_dir'] + "/species/deblur_table_level_7_aa.tsv/feature-table.biom"
    output:
      tsv=config['output_dir'] + "/species/level_7_aa.tsv"
    shell:
      "biom convert -i {input.table} -o {output.tsv} --to-tsv"
